# Занятие 1. Python. Начало
# 27.01.2021

# --- Полезные ссылки:
# Онлайн Python (3.6?): https://trinket.io/python3

# --- Полезные функции:
# 1. Комментирование через комбинацию "ctrl + /":
#    в начале строки:
#      # _код_ (один пробел между символом и кодом)
#      Закомментирует всю строку. Код выполняться не будет до отмены комментирования.
#    в конце строки:
#      _код_  # (два пробела между кодом и символом)
#      Оставить комментарий в конце строки. Код будет выполняться.
#
# 2. Форматирование всего кода в соответствии со стандартами PEP 8: "ctrl + alt + l"
#    PEP 8 - руководство по написанию кода на Python.


# Функция print()
# Выводит заданные объекты на стандартное устройство вывода (экран) или отправляет
# их текстовым потоком в файл. Ф-ция print() ничего не возвращает (None).

# Вывод простых значений через ф-цию print():
print("Вывод простых значений через ф-цию print():")
print(1208)  # целое число (int)
print(12.08)  # число с точкой (float)
print("1208, 12.08")  # строка (str)
print(1208, 12.08, "1208 / 12.08")
# где "," - разделитель значений вне str (кол-во пробелов после или до запятой
# значения не имеет. Всегда будет вывод с одним пробелом - после, и без пробела - до).
#
# "" (str) - в строку можно ввести любое значение, в любом формате. print() выведет его
# по принципу "как пишется, так и выводится". Например, если будет 3 пробела, то
# выведет 3 пробела и т.д.
print("")

print("My name is Michael", "12/08/1993")
print("My name is", "Michael", 12.08, 1993)
print("Michael", 12.08, 1993, "Popov")
print("(1 + 2) * 3 = 9")
print("")

# Вывод строчных значений (тип str) c манимуляциями со строкой:
print("Вывод строчных значений c манимуляциями:")
print("12" + "/" + "08" + "/" + "1993")  # конкатенация (склейка)
print("qwe" + "rty")
# Отдельно прописанные строчные значения слились в одну строку через сложение (+).
print("1" * 10)  # значение строки повторится 10 раз
print(("1" + "2") * 3)
# Через умножение (*) можно повторить значение строки заданное кол-во раз. При этом,
# применяя разничные математические варианты (как в последнем примере).
# Строку в чистом виде нельзя вычитать и делить!
print("")

# Вывод математических значений через функцию print() (калькулятор):
print("Вывод математических значений (калькулятор):")
# --- Сложение чисел:
print("Сложение чисел:")
print(2 + 2)
print(2 + 2.5)
print(1.9 + 2.85)
print("")
# --- Вычитание чисел:
print("Вычитание чисел:")
print(3 - 2)
print(4 - 1.0)
print(5.5 - 1.6)
print("")
# --- Умножение чисел:
print("Умножение чисел:")
print(2 * 3)
print(4 * 3.25)
print(2.25 * 3.0)
print("")
# --- Стандартное деление чисел (всегда float):
print("Стандартное деление чисел:")
print(8 / 4)
print(12 / 2.0)
print(15.5 / 10.0)
print("")

# --- Пример:
print("Пример:")
print(((12 - 20) * 3 + (-6)) / 5 + 6.75)
# По сути, все те же математические правила, только в коде.
print("")

# --- Целочисленное деление чисел:
print("Целочисленное деление чисел:")
print(20 // 2)  # без остатка
print(20 // 3)  # с остатком
# Почему ответ 6? 20 делится на наибольшие равные числа в самом себе, при этом, так
# чтобы был минимальный остаток от деления: 6 * 3 = 18
print(20.5 // 2)
print(20 // 3.5)
# Почему ответ 5.0? Присвоен тип float: 5.0 * 3.5 = 17.5
print("")
print(-20 // 2)
print(20 // -2)
print(-20 // -2)
# Если в примере есть отрицательные числа, но нет остатка от деления, то в результате
# выполняется стандартное присвоение отрицательного или положительного значения к
# итоговому числу.
print("")
print(-20 // 3)
print(20 // -3)
print(-20 // -3)
# Если в примере есть отрицательные числа, есть остаток от деления и ответ на пример
# предполагается отрицательным, то в результате к отрицательному числу прибавляется -1.
print("")

# --- Остаток от деления чисел:
print("Остаток от деления чисел:")
print(20 % 2)
print(-20 % 2)
print(20 % -2)
print(-20 % -2)
# Если в примере нет остатка от деления, то ответом всегда будет 0.
print("")

print(20 % 3)
# Решение: 6 * 3 = 18; 20 - 18 = 2

print(-20 % 3)
# Решение: -20 + 3 = -17; -17 + 3 = -14; -14 + 3 = -11; -11 + 3 = -8; -8 + 3 = -5;
# -5 + 3 = -2; -2 + 3 = 1 (mod 3)
# Если значение mod (после символа %) положительное, то выполняется сложение чисел от
# отрицательного числа (до символа %) на шаг равный значению mod, и ответом на пример
# должно стать первое положожительное число в арифметической прогрессии.

print(20 % -3)
# Решение: 20 - 3 = 17; 17 - 3 = 14; 14 - 3 = 11; 11 - 3 = 8; 8 - 3 = 5; 5 - 3 = 2;
# 2 - 3 = -1 (mod -3)
# Если значение mod (после символа %) отрицательное, то выполняется вычитание чисел от
# положительного числа (до символа %) на шаг равный значению mod, и ответом на пример
# должно стать первое отрицательное число в обратной арифметической прогрессии.

print(-20 % -3)
# Решение: -6 * -3 = -18; -20 - (-18) = -2. Минус на минус дало плюс.
